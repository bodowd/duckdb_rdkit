#
# NOTE: this workflow is for testing the extension template itself,
#     this workflow will be removed when scripts/bootstrap-template.py is run
#
name: Extension Template
on: [push, pull_request,repository_dispatch]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    name: Linux
    if: ${{ vars.RUN_RENAME_TEST == 'true' || github.repository == 'duckdb/extension-template' }}
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    strategy:
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_version: [ '<submodule_version>' ]
    env:
      # VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      # VCPKG_TARGET_TRIPLET: 'x64-linux'
      GEN: ninja
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    defaults:
      run:
        shell: bash

    steps:
      - name: Install required ubuntu packages
        run: |
          apt-get update -y -qq
          apt-get install -y -qq software-properties-common
          add-apt-repository ppa:git-core/ppa
          apt-get update -y -qq
          apt-get install -y -qq ninja-build make gcc-multilib g++-multilib libssl-dev wget openjdk-8-jdk zip maven unixodbc-dev libc6-dev-i386 lib32readline6-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip build-essential checkinstall libffi-dev curl libz-dev openssh-client

      - name: Install Git 2.18.5
        run: |
          wget https://github.com/git/git/archive/refs/tags/v2.18.5.tar.gz
          tar xvf v2.18.5.tar.gz
          cd git-2.18.5
          make
          make prefix=/usr install
          git --version

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Checkout DuckDB to version
        if: ${{ matrix.duckdb_version != '<submodule_version>'}}
        run: |
          cd duckdb
          git checkout ${{ matrix.duckdb_version }}

      - uses: ./duckdb/.github/actions/ubuntu_18_setup

      # - name: Setup vcpkg
      #   uses: lukka/run-vcpkg@v11.1
      #   with:
      #     vcpkgGitCommitId: a1a1cbc975abf909a6c8985a6a2b8fe20bbd9bd6

      - name: Build RDKit - install conda
        run: | 
              sudo apt-get install g++ wget make libgl1-mesa-dev mesa-common-dev
              source ${CONDA}/etc/profile.d/conda.sh
              sudo chown -R ${USER} ${CONDA}
              conda config --set always_yes yes --set changeps1 no
              conda update -q conda
              conda info -a
              conda create --name rdkit_build $(python) cmake \
                  boost-cpp=$(boost_version) \
                  py-boost=$(boost_version) \
                  numpy pillow eigen pandas=2.0 matplotlib-base=3.7 \
                  qt=5.9.7 cairo
              conda activate rdkit_build
              conda install -c conda-forge pytest nbval ipykernel>=6.0
      - name: Build RDKit - Setup build environment
        run: |
            source ${CONDA}/etc/profile.d/conda.sh
            conda activate rdkit_build
            export CXXFLAGS="${CXXFLAGS} -Wall -Werror"
            mkdir build && cd build && \
            cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DRDK_INSTALL_INTREE=ON \
            -DRDK_INSTALL_STATIC_LIBS=OFF \
            -DRDK_BUILD_CPP_TESTS=ON \
            -DRDK_BUILD_PYTHON_WRAPPERS=ON \
            -DRDK_BUILD_COORDGEN_SUPPORT=ON \
            -DRDK_BUILD_MAEPARSER_SUPPORT=ON \
            -DRDK_OPTIMIZE_POPCNT=ON \
            -DRDK_BUILD_TEST_GZIP=ON \
            -DRDK_BUILD_FREESASA_SUPPORT=ON \
            -DRDK_BUILD_AVALON_SUPPORT=ON \
            -DRDK_BUILD_INCHI_SUPPORT=ON \
            -DRDK_BUILD_YAEHMOP_SUPPORT=ON \
            -DRDK_BUILD_XYZ2MOL_SUPPORT=ON \
            -DRDK_BUILD_CAIRO_SUPPORT=ON \
            -DRDK_BUILD_QT_SUPPORT=ON \
            -DQt5_DIR=/usr/lib/x86_64-linux-gnu/cmake/Qt5 \
            -DRDK_BUILD_SWIG_WRAPPERS=OFF \
            -DRDK_SWIG_STATIC=OFF \
            -DRDK_BUILD_THREADSAFE_SSS=ON \
            -DRDK_TEST_MULTITHREADED=ON \
            -DRDK_BUILD_CFFI_LIB=ON \
            -DBoost_NO_SYSTEM_PATHS=ON \
            -DBoost_NO_BOOST_CMAKE=TRUE \
            -DRDK_BOOST_PYTHON3_NAME=$(python_name) \
            -DPYTHON_EXECUTABLE=${CONDA_PREFIX}/bin/python3 \
            -DCMAKE_INCLUDE_PATH="${CONDA_PREFIX}/include" \
            -DCMAKE_LIBRARY_PATH="${CONDA_PREFIX}/lib"
       
      - name: Build RDKit - Configure build (Run CMake)
        run: |
              source ${CONDA}/etc/profile.d/conda.sh
              conda activate rdkit_build
              cd build
              make -j $( $(number_of_cores) ) install
      - name: Build RDKit - Build RDKit 
        run: |
              source ${CONDA}/etc/profile.d/conda.sh
              conda activate rdkit_build
              export RDBASE=`pwd`
              export PYTHONPATH=${RDBASE}:${PYTHONPATH}
              export LD_LIBRARY_PATH=${RDBASE}/lib:${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH}
              echo "LD_LIBRARY_PATH: " $LD_LIBRARY_PATH
              export QT_QPA_PLATFORM='offscreen'
              cd build
              ctest -j $( $(number_of_cores) ) --output-on-failure -T Test
      - name: Build RDKit -  Run tests
        run: |
              source ${CONDA}/etc/profile.d/conda.sh
              conda activate rdkit_build
              conda install -c conda-forge ipython=8.12 sphinx myst-parser
              export RDBASE=`pwd`
              export PYTHONPATH=${RDBASE}:${PYTHONPATH}
              export LD_LIBRARY_PATH=${RDBASE}/lib:${LD_LIBRARY_PATH}
              export QT_QPA_PLATFORM='offscreen'
              cd Docs/Book
              make doctest

      - name: Rename extension
        run: |
          python3 scripts/bootstrap-template.py ext_1_a_123b_b11

      - name: Build
        run: |
          make

      - name: Test
        run: |
          make test

  macos:
    name: MacOS
    if: ${{ vars.RUN_RENAME_TEST == 'true' || github.repository == 'duckdb/extension-template' }}
    runs-on: macos-latest
    strategy:
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_version: [ '<submodule_version>']
    env:
      # VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      # VCPKG_TARGET_TRIPLET: 'x64-osx'
      OSX_BUILD_ARCH: 'x86_64'
      GEN: ninja
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Install Ninja
        run: brew install ninja

      - uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Checkout DuckDB to version
        if: ${{ matrix.duckdb_version != '<submodule_version>'}}
        run: |
          cd duckdb
          git checkout ${{ matrix.duckdb_version }}

      # - name: Setup vcpkg
      #   uses: lukka/run-vcpkg@v11.1
      #   with:
      #     vcpkgGitCommitId: a1a1cbc975abf909a6c8985a6a2b8fe20bbd9bd6

      - name: Rename extension
        run: |
          python scripts/bootstrap-template.py ext_1_a_123b_b11

      - name: Build
        run: |
          make

      - name: Test
        run: |
          make test

  windows:
    name: Windows
    if: ${{ vars.RUN_RENAME_TEST == 'true' || github.repository == 'duckdb/extension-template' }}
    runs-on: windows-latest
    strategy:
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_version: [ '<submodule_version>' ]
    # env:
      # VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      # VCPKG_TARGET_TRIPLET: 'x64-windows-static-md'
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Checkout DuckDB to version
        # Add commits/tags to build against other DuckDB versions
        if: ${{ matrix.duckdb_version != '<submodule_version>'}}
        run: |
          cd duckdb
          git checkout ${{ matrix.duckdb_version }}

      # - name: Setup vcpkg
      #   uses: lukka/run-vcpkg@v11.1
      #   with:
      #     vcpkgGitCommitId: a1a1cbc975abf909a6c8985a6a2b8fe20bbd9bd6

      - name: Rename extension
        run: |
          python scripts/bootstrap-template.py ext_1_a_123b_b11

      - name: Build
        run: |
          make

      - name: Test extension
        run: |
          build/release/test/Release/unittest.exe
