# Require statement will ensure this test is run with this extension loaded
require duckdb_rdkit

statement ok
CREATE TABLE molecules (m Mol);


# note: the db is not reset after each test. So if 3 molecules are inserted via 3 different tests,
# reading from the table will give back 3 molecules
#
# a molecule can be constructed and inserted into the Mol column using mol_to_smiles
statement ok 
INSERT INTO molecules VALUES (mol_from_smiles('C1=CC=CC=C1'));

# cast from VARCHAR to Mol will be and succeed
statement ok 
INSERT INTO molecules VALUES ('C1=CC=CC=C1');

# ::mol cast works for insert
statement ok 
INSERT INTO molecules VALUES ('C1=CC=CC=C1'::mol);

# the inserted molecule can be cast back automatically to a string
# it should be rdkit canonicalized now
query I
SELECT m FROM molecules;
----
c1ccccc1
c1ccccc1
c1ccccc1

# the inserted molecule can be cast back with ::text
query I
SELECT m::text FROM molecules;
----
c1ccccc1
c1ccccc1
c1ccccc1

# molecule can be converted back to SMILES with mol_to_smiles 
query I
SELECT mol_to_smiles(m) FROM molecules;
----
c1ccccc1
c1ccccc1
c1ccccc1


statement ok
CREATE TABLE t (id INT, m Mol);

# an invalid SMILES will be unable to be converted from a string
# a warning will be printed to the user, but can't test that print out
# with sqllogictest
# The database will insert a NULL
statement ok
INSERT INTO t (id, m) VALUES (1, 'CCa');

query II
SELECT id, m from t WHERE m IS NULL;
----
1	NULL

query II
SELECT id, m from t WHERE m IS NOT NULL;
----

